package com.revature.services;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.apache.log4j.Logger;

import com.revature.Account;

public class DbService {

	private static Logger logger = Logger.getLogger(DbService.class);
	
	public static Connection getConnection() {
		String url = "jdbc:postgresql://localhost:5432/";
		String username = "postgres";
		String password = "7540";
		
		Connection conn = null;
		try {
			conn = DriverManager.getConnection(url, username, password);
		} catch (SQLException e) {
			logger.warn("Unable to obtain connection to database", e);
		}
		return conn;
	}
	
	// There are my CRUD Operations: 
	
	//Create (Add Account)
	// - we access our accounts by account ID, therefore, we return the int
	
	
	int AddAccount(String firstName, String lastName, String ssn, AccountType accountType, Double balance) {
		int userId = -1;
		int accountId = -1;
		
		Connection connection = getConnection();
		try {
			connection.setAutoCommit(false);
			// Adds USER
			String addUserSql = "INSERT INTO users(FirstName, LastName, SSN) values(?,?,?)";
			PreparedStatement addUser = connection.prepareStatement(addUserSql, Statement.RETURN_GENERATED_KEYS);
			addUser.setString(1, firstName);
			addUser.setString(2, lastName);
			addUser.setString(3, ssn);
			addUser.executeUpdate();
			
			// This generates an ID to insert into the MAPPING table --> allowing us to access the ID key.
			ResultSet addUserResults = addUser.getGeneratedKeys();
			if(addUserResults.next()) {
				userId = addUserResults.getInt(1);
			}
			
			// Adds ACCOUNT
			String addAccountSql = "INSERT INTO accounts(Type, Balance) values(?,?)";
			PreparedStatement addAccount = connection.prepareStatement(addAccountSql, Statement.RETURN_GENERATED_KEYS);
			addAccount.setString(1, accountType.name());
			addAccount.setDouble(2, balance);
			addAccount.executeUpdate();
			
			//Then...get Generated Keys to add into the MAPPING table - associated with account.
			ResultSet addAccountResults = addAccount.getGeneratedKeys();
			if(addAccountResults.next()) {
				accountId = addAccountResults.getInt(1);
			}
			
			// Finally, we LINK THE USER TO THE ACCOUNT by entering a NEW RECORD into the mapping table...
				// with the id's generated by User and Account insert operations (above ^)
			if(userId > 0 && accountId > 0) { // check that there IS a userId and an accountId!
				String linkAccountSql = "INSERT INTO mappings(UserId, AccountId) values(?,?)";
				PreparedStatement linkAccount = connection.prepareStatement(linkAccountSql);
				linkAccount.setInt(1, userId);
				linkAccount.setInt(2, accountId);
				linkAccount.executeUpdate();
				connection.commit();
			} else {
				connection.rollback();
			}
			connection.close();
			
		} catch (SQLException e) {
			System.err.println("An error has occurred: " + e.getMessage());
		} // it will not automatically commit the queries UNTIL I call Connection.commit
		return accountId;
	}
	
	// Read -- this will read an account from the Database and return a CUSOTMER OBJECT
	// this will use the accountId to retrieve the customer Object
	
	Customer GetAccount(int accountId) {
		Customer customer = null;
		Connection connection = getConnection(); 
		try {
		String findUserSql = "SELECT FirstName, LastName, SSN, Type, Balance"
			+ "FROM Users a JOIN Mappings b ON a.ID = b.UserId "
			+ "JOIN Accounts c on c.ID = b.AccountId "
			+ "WHERE c.ID = ?"; // ? = accountId argument passed above.
		PreparedStatement findUser = connection.prepareStatement(findUserSql);
		// now, tell findUser which character we want to get
		findUser.setInt(1, accountId);
		ResultSet findUserResults = findUser.executeQuery();
			if(findUserResults.next()) {
				String firstName = findUserResults.getString("FirstName");
				String lastName = findUserResults.getString("LastName");
				String ssn = findUserResults.getString("SSN");
				AccountType accountType = AccountType.valueOf(findUserResults.getString("Type"));
				double balance = findUserResults.getDouble("Balance");
				Account account;
				if(accountType == AccountType.Checking) {
					account = new Checking(accountId, balance);
				} else if (accountType == AccountType.Savings) {
					account = new Savings(accountId, balance);
				} else {
					System.err.println("Unknown Account Type");
				}
				
			} 
			else {
				System.err.println("No User Account Found for ID " + accountId);
			}
		}
		catch(SQLException e) {
			System.out.println(e.getMessage());
		}
		return customer;
	}
	
}
